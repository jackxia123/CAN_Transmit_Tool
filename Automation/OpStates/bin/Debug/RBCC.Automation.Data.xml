<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RBCC.Automation.Data</name>
    </assembly>
    <members>
        <member name="T:RBCC.Automation.Data.ParameterType">
            <summary>
            
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ParameterType.Measurement">
            <summary>
            
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ParameterType.Calibration">
            <summary>
            
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.AbstractParameter`2">
            <summary>
            Base class of parameters.
            </summary>
            <typeparam name="TParameter">Type of parameter</typeparam>
            <typeparam name="TValue">Value of the parameter</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IParameter`2">
            <summary>
            Generic interface for all Parameters.
            </summary>
            <typeparam name="TParameter">The parameter itself. Used as return type for the fluent interface.</typeparam>
            <typeparam name="TValue">The value of the parameter.</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IParameter`1">
            <summary>
            Interface for all Parameters.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.IParameter`1.SetLabel(System.String)">
            <summary>
            Sets the label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.IParameter`1.SetName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.IParameter`1.SetComment(System.String)">
            <summary>
            Sets the comment.
            </summary>
            <param name="comment">The comment.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.IParameter`1.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:RBCC.Automation.Data.IParameter`1.IsLabelChangeable">
            <summary>
            Gets or sets a value indicating whether this instance is label changeable.
            </summary>
            <value>
            	<c>true</c> if this instance is label changeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RBCC.Automation.Data.IParameter`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:RBCC.Automation.Data.IParameter`1.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="M:RBCC.Automation.Data.IParameter`2.SetValue(`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.IParameter`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AbstractParameter`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.SetName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>Instance of the parameter</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.SetComment(System.String)">
            <summary>
            Sets the comment.
            </summary>
            <param name="comment">The comment.</param>
            <returns>Instance of the parameter</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.SetLabel(System.String)">
            <summary>
            Sets the label.
            </summary>
            <param name="label">The label.</param>
            <returns>Instance of the parameter</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.SetValue(`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
            <returns>Instance of the parameter</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.IsSatisfied(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.op_Implicit(RBCC.Automation.Data.AbstractParameter{`0,`1})~`0">
            <summary>
            Implicit operator s the T parameter.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractParameter`2.ToConcreteType">
            <summary>
            Implicit operator s the T parameter.
            </summary>
            <returns>Instance of the parameter</returns>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractParameter`2.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractParameter`2.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractParameter`2.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractParameter`2.IsLabelChangeable">
            <summary>
            Gets or sets a value indicating whether this instance is label changeable.
            </summary>
            <value>
            	<c>true</c> if this instance is label changeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractParameter`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.IParameter">
            <summary>
            Base interface of all Parameters
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterBoolean">
            <summary>
            ParameterBoolean Implementaion
            </summary>
            <example>
            Initialization with fluent interface.
            <code lang="C#">
            var Happy = new ParameterBoolean ( )
            .SetName ( "Happy" )
            .SetComment ( "Are you happy?" )
            .SetValue ( true );
            </code>
            Initialization with properties.
            <code lang="C#">
            var Happy = new ParameterBoolean ( );
            Happy.Name = "Happy";
            Happy.Comment = "Are you happy?";
            Happy.Value = true;
            </code>
            Initialization with C# 3.0 object initializer.
            <code lang="C#">
            var Happy = new ParameterBoolean ( )
            {
            Name = "Happy",
            Comment = "Are you happy?",
            Value = true
            };
            </code>
            </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.op_Equality(RBCC.Automation.Data.ParameterBoolean,RBCC.Automation.Data.ParameterBoolean)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.op_Equality(RBCC.Automation.Data.ParameterBoolean,System.Boolean)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.op_Inequality(RBCC.Automation.Data.ParameterBoolean,RBCC.Automation.Data.ParameterBoolean)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.op_Inequality(RBCC.Automation.Data.ParameterBoolean,System.Boolean)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.Equals(RBCC.Automation.Data.ParameterBoolean)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterBoolean.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterCollection`1">
             <summary>
             ParameterCollection
             </summary>
             <typeparam name="TParameter">Specifies the type of the contained parameter objects.</typeparam>
             <example>
             <code lang="C#">
            
             var Interprets = new ParameterCollection &lt; ParameterString &gt; ( )
                .SetDefaultType ( new ParameterString ( )
                                .SetName ( "Interpret" )
                                .SetValue ( "Emmerson, Lake &amp; Palmer" )
                                .SetComment ( "a typical interpret of the 70s" ) )
                .SetName ( "Interprets" )
                .SetComment ( "a list of interprets" );
            
             </code>
             Access to the collection items:
             <code lang="C#">
             foreach ( var interpret in Interprets.Items )
             {
                 Console.WriteLine ( interpret.Name );
             }
             </code>
             </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterCollection`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.System#Collections#Generic#IEnumerable{TParameter}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.SetName(System.String)">
            <summary>
            Sets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.SetComment(System.String)">
            <summary>
            Sets the specified comment.
            </summary>
            <param name="comment">The comment.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCollection`1.SetDefaultType(`0)">
            <summary>
            Initializes the Array with the specified Parameter Object instance.
            </summary>
            <param name="item">The parameter object.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCollection`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <name>The name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCollection`1.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <name>The comment.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCollection`1.ItemType">
            <summary>
            Gets the parameter object with which the array is initialized.
            </summary>
            <name>The parameter object.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCollection`1.Items">
            <summary>
            Gets the elements of the array.
            </summary>
            <name>The item-list.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCollection`1.Item(System.Int32)">
            <summary>
            Gets the parameter at the specified index.
            </summary>
            <value>Type: <see cref="T:System.Int32"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterCurve`2">
             <summary>
             ParameterCurve of X and Y values
             </summary>
             <typeparam name="TXUnit">The unit specifying the instance of this curve x-axis type.</typeparam>
             <typeparam name="TYUnit">The unit specifying the instance of this curve y-axis type.</typeparam>
             <example>
             <code lang="C#">
            
            ParameterCurve &lt; Time, Length &gt; DistanceCurve = new ParameterCurve &lt; Time, Length &gt; 
                                                                            {
                                                                                 SetName = "Distance Curve",
                                                                                 Comment = "Some comment",
                                                                                 Value = new Curve &lt; Time, Length &gt;
                                                                                     { new Point &lt; Time, Length &gt; { X = new Double &lt; Time &gt; ( 0, Time.Second ),
                                                                                                                         Y = new Double &lt; Length &gt; ( 0, Length.Meter ) },
                                                                                       new Point &lt; Time, Length &gt; { X = new Double &lt; Time &gt; ( 1, Time.Second ),
                                                                                                                         Y = new Double &lt; Length &gt; ( 0.5, Length.Meter ) },
                                                                                       ...
                                                                                     }
                                                                            }
            
             </code>
             </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCurve`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterCurve`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCurve`2.SetValue(RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Sets the specified name and unit.
            </summary>
            <param name="value">The value.</param>        
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCurve`2.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the maximum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterCurve`2.SetXRange(System.Double,System.Double)">
            <summary>
            Sets the maximum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCurve`2.YMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name y-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCurve`2.YMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name y-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCurve`2.XMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name x-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterCurve`2.XMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name x-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterDouble`1">
            <summary>
            ParameterDouble
            </summary>
            <typeparam name="TUnit">The unit specifying the instance of this parameter type.</typeparam>
            <example>
            Initialization with fluent interface.
            <code lang="C#">
            var DistanceToDrive = new ParameterDouble &lt; Length &gt; ( )
                .SetName ( "Distance To Drive" )
                .SetComment ( "Sets the distance to drive" )
                .SetValue ( new Double &lt; Length &gt; ( 19283.74, Length.Kilometer ));
            </code>
            Initialization with properties.
            <code lang="C#">
            var DistanceToDrive = new ParameterDouble &lt; Length > ( );
            DistanceToDrive.Name = "Distance To Drive",
            DistanceToDrive.Comment = "Sets the distance to drive",
            DistanceToDrive.Value = new Double &lt; Length &gt; ( 19283.74, Length.Kilometer );
            </code>
            Initialization with C# 3.0 object initializer.
            <code lang="C#">
            var DistanceToDrive = new ParameterDouble &lt; Length &gt; ( )
                 {
                     Name = "Distance To Drive",
                     Comment = "Sets the distance to drive",
                     Value = new Double &lt; Length &gt; ( 19283.74, Length.Kilometer )
                 };
            </code>
            </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterDouble`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterDouble`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterDouble`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.Double{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterDouble`1.SetValue(System.Double,`0)">
            <summary>
            Sets the specified name and unit.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterDouble`1.SetRange(System.Double,System.Double)">
            <summary>
            Sets the maximum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterDouble`1.op_Explicit(RBCC.Automation.Data.ParameterDouble{`0})~RBCC.Automation.Data.Double{`0}">
            <summary>
            Explicit operator s the double.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterDouble`1.MinimumSpecification">
            <summary>
            Gets the minimum specification.
            </summary>
            <value>The minimum specification.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterDouble`1.MaximumSpecification">
            <summary>
            Gets the maximum specification.
            </summary>
            <value>The maximum specification.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterDouble`1.InRangeSpecification">
            <summary>
            Gets the in range specification.
            </summary>
            <value>The in range specification.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterDouble`1.Minimum">
            <summary>
            Gets or sets the lower bound of the permitted name range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterDouble`1.Maximum">
            <summary>
            Gets or sets the upper bound of the permitted name range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterEnum`1">
            <summary>
            ParameterEnum
            </summary>
            <typeparam name="TEnum">For want of the ability to set this constraint to <see cref="T:System.Enum"/>, the three interface types of <see cref="T:System.Enum"/> are used. T <b>must</b> be of Type <see cref="T:System.Enum"/>
            To realize a <c>ParameterEnum &lt; TEnum &gt;</c>, it must be initialized with a <see cref="T:System.Enum"/> Type.
            </typeparam>
            <example>
            <code lang="C#">
            
            public enum Colors { Red, Blue, Green }
            ParameterEnum &lt; Colors &gt; ColorSelection = new ParameterEnum &lt; Colors &gt; ( ).SetSelection ( Colors.Red );
            
            </code>
            </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterEnum`1.SetSelection(`0)">
            <summary>
            Sets the selected item in the list.
            </summary>
            <param name="selected">The selected item.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterEnum`1.op_Implicit(RBCC.Automation.Data.ParameterEnum{`0})~`0">
            <summary>
            Implicit operator s the T enum.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterEnum`1.Selected">
            <summary>
            Gets or sets the selection.
            </summary>
            <comment>The selection.</comment>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterInteger`1">
            <summary>
            ParameterInteger
            </summary>
            <typeparam name="TUnit">The unit specifying the instance of this parameter type.</typeparam>
            <example>
            Initialization with fluent interface.
            <code lang="C#">
            ParameterInteger &lt; Velocity &gt; Speed = new ParameterInteger &lt; Velocity &gt; ( )
                                                                       .SetName ( "Speed" )
                                                                       .SetComment ( "a speed of a thing" )
                                                                       .SetRange ( 0, 100000 )
                                                                       .SetValue ( 49382, Velocity.MeterPerSecond );
            </code>
            Initialization with properties.
            <code lang="C#">
            ParameterInteger &lt; Velocity &gt; Speed = new ParameterInteger &lt; Velocity &gt; ( );
            Speed.Name = "Speed";
            Speed.Comment = "a speed of a thing";
            Speed.SetRange ( 0, 100000 );
            Speed.SetValue ( 49382, Velocity.MeterPerSecond );
            </code>
            Initialization with C# 3.0 object initializer.
            <code lang="C#">
            </code>
            <code lang="C#">
            ParameterInteger &lt; Velocity &gt; Speed = new ParameterInteger &lt; Velocity &gt; 
            {
                Name = "Speed",
                Comment = "a speed of a thing",   
            }
            </code>
            </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterInteger`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterInteger`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterInteger`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the specified name together with its corresponding unit.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterInteger`1.SetRange(System.Int32,System.Int32)">
            <summary>
            Sets the specified value-range.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterInteger`1.Minimum">
            <summary>
            Gets the min.
            </summary>
            <returns>The lower bound of the valid range of values.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterInteger`1.Maximum">
            <summary>
            Gets the max.
            </summary>
            <value>The maximum.</value>
            <returns>The upper bound of the valid range of values.</returns>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterRecord`1">
             <summary>
             ParameterRecord
             </summary>
             <typeparam name="TParameter">The class deriving from this one.</typeparam>
             <remarks>
             In order to have a class being displayed in the <b>ParameterManager</b>, it must be derived from this class.
             </remarks>
             <example>
             <code lang="C#">
             
            Velocity VelocityList = new Velocity ( "VelocityList" );
            
            public class Velocity : ParameterRecord &lt; Velocity &gt;
            {
                private ParameterDouble &lt; Velocity &gt; m_speed =
                    new ParameterDouble &lt; Velocity &gt; ( ).SetName ( "Speed" ).Value ( 0.0, Velocity.KilometerPerHour ).Range ( 0.0, 270.0 );
            
                private ParameterDouble &lt; Velocity &gt; m_speed2 =
                    new ParameterDouble &lt; Velocity &gt; ( ).SetName ( "Speed2" ).Value ( 0.0, Velocity.KilometerPerHour ).Range ( 0.0, 270.0 );
            
                public Velocity ( )
                    : this ( Guid.NewGuid ( ).ToString ( ) )
                {
                }
            
                public Velocity ( string name )
                    : base ( name )
                {
                    RegisterItems ( m_speed, m_speed2 );
                }
            
                public ParameterDouble &lt; Velocity &gt; Speed
                {
                    get { return m_speed; }
                }
            
                public ParameterDouble &lt; Velocity &gt; Speed2
                {
                    get { return m_speed2; }
                }
            }
            
             </code>
             </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterRecord`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterRecord`1"/> class.
            </summary>
            <remarks>If you use this constructor to instanciate this class, you have to set the Name property in order to assign a valid name. Else it will default to randomly generated guuid.</remarks>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.RegisterItems(RBCC.Automation.Data.IParameter[])">
            <summary>
            Registers the items of the record.
            </summary>
            <param name="parameter">The parameter list.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.SetName(System.String)">
            <summary>
            Sets the specified name of the parameter.
            </summary>
            <param name="name">The name.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.SetComment(System.String)">
            <summary>comment
            Sets the specified comment.
            </summary>
            <param name="comment">The comment.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterRecord`1.SetLabel(System.String)">
            <summary>
            Sets the label.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterRecord`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterRecord`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterRecord`1.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterRecord`1.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterString">
            <summary>
            ParameterString
            </summary>
            <example>
            
            Initialization with fluent interface.
            <code lang="C#">
            ParameterString message = new ParameterString ( )
                                                  .SetName ( "Message" )
                                                  .Comment ( "What do you want to say?" )
                                                  .Value ( "Hello World" );
            </code>
            Initialization with properties.
            <code lang="C#">
            ParameterString message = new ParameterString ( );
            message.Name = "Message";
            message.Comment = "What do you want to say?";
            message.Value = "Hello World";
            </code>
            Initialization with C# 3.0 object initializer.
            <code lang="C#">
            ParameterString message = new ParameterString
            {
                Name = "Message"
                Comment = "What do you want to say?"
                Value = "Hello World"             
            };
            </code>
            </example>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterStringArray">
            <summary>
            ParameterStringArray
            </summary>
            <example>
            Initialization with fluent interface.
            <code lang="C#">
            var interprets = new ParameterStringArray ( )
                                          .SetName ( "Interprets" )
                                          .SetComment ( "a list of interprets" )
                                          .SetValue ( "Apocalyptica", "The Monks of St. Michaels", "Yo Yo Ma" );
            </code>
            Initialization with properties.
            <code lang="C#">
            var interprets = new ParameterStringArray ( );
            interprets.SetName = "Interprets";
            interprets.Comment = "a list of interprets";
            interprets.Value = new [] { "Apocalyptica", "The Monks of St. Michaels", "Yo Yo Ma" };
            </code>
            Initialization with C# 3.0 object initializer.
            <code lang="C#">
            var interprets = new ParameterStringArray 
            {
                Name = "Interprets",
                Comment = "a list of interprets",
                Value = new [] { "Apocalyptica", "The Monks of St. Michaels", "Yo Yo Ma" }
            };
            </code>    
            </example>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterStringArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterStringArray"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterStringArray.SetValue(System.String[])">
            <summary>
            Sets the specified name.
            </summary>
            <param name="value">The value.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="T:RBCC.Automation.Data.ParameterUnsignedInteger`1">
            <summary>
            ParameterUnsignedInteger
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterUnsignedInteger`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ParameterUnsignedInteger`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterUnsignedInteger`1.SetValue(System.UInt32,`0)">
            <summary>
            Sets the specified name together with its corresponding unit.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.ParameterUnsignedInteger`1.SetRange(System.UInt32,System.UInt32)">
            <summary>
            Sets the specified value-range.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterUnsignedInteger`1.Minimum">
            <summary>
            Gets the min.
            </summary>
            <returns>The lower bound of the valid range of values.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.ParameterUnsignedInteger`1.Maximum">
            <summary>
            Gets the max.
            </summary>
            <value>The maximum.</value>
            <returns>The upper bound of the valid range of values.</returns>
        </member>
        <member name="T:RBCC.Automation.Data.Curve`2">
            <summary>
            A double based curve.
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.#ctor(RBCC.Automation.Data.Point{`0,`1}[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.#ctor(System.Collections.Generic.IEnumerable{RBCC.Automation.Data.Point{`0,`1}})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Clone">
            <summary>
            Clones the curve.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Equals(RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Comparison method.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Add(RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Adds a point to the curve.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Clear">
            <summary>
            Clears the point.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Contains(RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Checks whether the curve contains the point.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.CopyTo(RBCC.Automation.Data.Point{`0,`1}[],System.Int32)">
            <summary>
            Copies the curve to an array.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Remove(RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Removes a point from the curve.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an un-typed enumerator for the curve.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.GetEnumerator">
            <summary>
            Gets an typed enumerator for the curve.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.IndexOf(RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Provides the index of a specific point in the curve.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Insert(System.Int32,RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Inserts a point into the curve.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.RemoveAt(System.Int32)">
            <summary>
            Removes a point of the curve by its index.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.ToString">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.ToString(System.Globalization.CultureInfo)">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <param name="cultureInfo">CultureInfo Object from System.Globalisation</param>
            <returns>
            formatted string with cultureInfo specific seperators
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Equals(System.Object)">
            <summary>
            Comparison method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.GetHashCode">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.op_Equality(RBCC.Automation.Data.Curve{`0,`1},RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Equality comparison method.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.op_Inequality(RBCC.Automation.Data.Curve{`0,`1},RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Inequality comparison method.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.Perform``1(RBCC.Automation.Data.ICurveOperation{``0,RBCC.Automation.Data.Curve{`0,`1}})">
            <summary>
            Performs an operation on the curve.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="operation">The operation.</param>
            <returns>TResult</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.XExtractor(RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Xs the extractor.
            </summary>
            <param name="curve">The curve.</param>
            <returns>IEnumerable of Double values</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Curve`2.YExtractor(RBCC.Automation.Data.Curve{`0,`1})">
            <summary>
            Ys the extractor.
            </summary>
            <param name="curve">The curve.</param>
            <returns>IEnumerable of Double values</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.XAxis">
            <summary>
            Gets the x-axis of the curve.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.YValues">
            <summary>
            Gets the y-values of the curve.
            </summary>
            <value>The Y values.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.Count">
            <summary>
            Gets the count of points.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IsReadOnly">
            <summary>
            Indicates whether the curve is readonly.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.Item(System.Int32)">
            <summary>
            Gets a point of the curve by its index.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Curve`2.IValueCollection`1">
            <summary>
            A value collection of physical values.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IValueCollection`1.Minimum">
            <summary>
            Gets the minium value of the value collection.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IValueCollection`1.Maximum">
            <summary>
            Gets the maximum value of the value collection.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IValueCollection`1.MinimumDelta">
            <summary>
            Gets the minimum delta of the value collection.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IValueCollection`1.MaximumDelta">
            <summary>
            Gets the maximum delta of the value collection.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Curve`2.IValueCollection`1.AverageDelta">
            <summary>
            Gets the average delta of the value collection.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Integer`1">
            <summary>
            A physical representation of a integer name and the corresponding unit.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Integer`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.CompareTo(RBCC.Automation.Data.Integer{`0})">
            <summary>
            Comparison method.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Equals(RBCC.Automation.Data.Integer{`0})">
            <summary>
            Equality comparison method.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.Integer{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Addition(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Add(RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Subtraction(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Subtract(RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Multiply(RBCC.Automation.Data.Integer{`0},System.Int32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Multiply(System.Int32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Division(RBCC.Automation.Data.Integer{`0},System.Int32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Divide(System.Int32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Modulus(RBCC.Automation.Data.Integer{`0},System.Int32)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Mod(System.Int32)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Equality(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Inequality(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_GreaterThan(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_LessThan(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_GreaterThanOrEqual(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_LessThanOrEqual(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.FuzzyEquals(RBCC.Automation.Data.Integer{`0},RBCC.Automation.Data.Integer{`0})">
            <summary>
            Equalses the specified expected double.
            </summary>
            <param name="expected">The expected double.</param>
            <param name="tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.ConvertToUnit(`0)">
            <summary>
            Converts the physical value to a specific unit.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.op_Implicit(RBCC.Automation.Data.Integer{`0})~RBCC.Automation.Data.Double{`0}">
            <summary>
            Conversion to cast a integer to double physical value.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Integer`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Integer`1.Unit">
            <summary>
            Gets the unit.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Integer`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Double`1">
            <summary>
            A physical representation of a double name and the corresponding unit.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.#ctor(System.Double,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Double`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.CompareTo(RBCC.Automation.Data.Double{`0})">
            <summary>
            <see cref="T:System.IComparable`1"/>
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Equals(RBCC.Automation.Data.Double{`0})">
            <summary>
            <see cref="T:System.IEquatable`1"/>
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.Double{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.FuzzyEquals(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Equalses the specified expected double.
            </summary>
            <param name="expected">The expected double.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.ConvertToUnit(`0)">
            <summary/>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Add(RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the named alternate for operator +.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Addition(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Subtraction(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Subtract(RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Multiply(RBCC.Automation.Data.Double{`0},System.Double)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Multiply(System.Double)">
            <summary>
            Operator *s the specified left.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Division(RBCC.Automation.Data.Double{`0},System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Divide(System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="divisor">The divisor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Modulus(RBCC.Automation.Data.Double{`0},System.Double)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Mod(System.Double)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Equality(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Inequality(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_GreaterThan(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_LessThan(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_GreaterThanOrEqual(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_LessThanOrEqual(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Double`1.op_Explicit(RBCC.Automation.Data.Double{`0})~RBCC.Automation.Data.Integer{`0}">
            <summary>
            Conversion to cast a double to integer physical value.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Double`1.Unit">
            <summary>
            Gets the unit.
            </summary>
            <name>The unit.</name>
        </member>
        <member name="P:RBCC.Automation.Data.Double`1.Value">
            <summary>
            Gets the value.
            </summary>
            <name>The unit.</name>
        </member>
        <member name="T:RBCC.Automation.Data.Interval`1">
            <summary>
            A double based interval.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.#ctor(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.IsOutOfRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the value is out of the range.
            </summary>
            <param name="value">The value.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is out of range] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.IsInRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the value is in the range.
            </summary>
            <param name="value">The value.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is in range] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.IsOutOfRange(RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the value is out of the interval range.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is out of range] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.IsInRange(RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the value is in the interval range.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is in range] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.Equals(RBCC.Automation.Data.Interval{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The obj.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.op_Equality(RBCC.Automation.Data.Interval{`0},RBCC.Automation.Data.Interval{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`1.op_Inequality(RBCC.Automation.Data.Interval{`0},RBCC.Automation.Data.Interval{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Interval`1.Left">
            <summary>
            Get the left value of the interval.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Interval`1.Right">
            <summary>
            Get the right value of the interval.
            </summary>
            <value>The right.</value>
        </member>
        <member name="T:RBCC.Automation.Data.Interval`2">
            <summary>
            A double point based interval
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.#ctor(RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsOutOfXRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Checks whether the x value is out of x range.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsOutOfXRange(RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the x value is out of the intervals x range.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	<c>true</c> if [is out of X range] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsOutOfYRange(RBCC.Automation.Data.Double{`1},RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Checks whether the y value is out of y range.
            </summary>
            <param name="y">The y.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is out of Y range] [the specified y]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsOutOfYRange(RBCC.Automation.Data.Double{`1})">
            <summary>
            Checks whether the y value is out of the intervals y range.
            </summary>
            <param name="y">The y.</param>
            <returns>
            	<c>true</c> if [is out of Y range] [the specified y]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsInXRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Checks whether the x value is in x range.
            </summary>
            <param name="x">The x.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is in X range] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsInXRange(RBCC.Automation.Data.Double{`0})">
            <summary>
            Checks whether the x value is in the intervals x range.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	<c>true</c> if [is in X range] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsInYRange(RBCC.Automation.Data.Double{`1},RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Checks whether the y value is in y range.
            </summary>
            <param name="y">The y.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is in Y range] [the specified y]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.IsInYRange(RBCC.Automation.Data.Double{`1})">
            <summary>
            Checks whether the y value is in the intervals y range.
            </summary>
            <param name="y">The y.</param>
            <returns>
            	<c>true</c> if [is in Y range] [the specified y]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.Equals(RBCC.Automation.Data.Interval{`0,`1})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The obj.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.op_Equality(RBCC.Automation.Data.Interval{`0,`1},RBCC.Automation.Data.Interval{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Interval`2.op_Inequality(RBCC.Automation.Data.Interval{`0,`1},RBCC.Automation.Data.Interval{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Interval`2.Left">
            <summary>
            Get/set the left point of the interval.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Interval`2.Right">
            <summary>
            Get/set the right point of the interval.
            </summary>
            <value>The right.</value>
        </member>
        <member name="T:RBCC.Automation.Data.ICurveOperation`2">
            <summary>
            Defines a generic operation interface for curve operations.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TCurve">The type of the curve.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.ICurveOperation`2.ProcessCurve(`1)">
            <summary>
            Performs the operation on a curve.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.IPointOperation`2">
            <summary>
            Defines a generic operation interface for point operations.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TPoint">The type of the point.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.IPointOperation`2.ProcessPoint(`1)">
            <summary>
            Performs the operation on a point.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Map`3">
            <summary>
            A double based curve.
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
            <typeparam name="TValueUnit">The type of the value unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Map`3"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.#ctor(System.Collections.Generic.IEnumerable{RBCC.Automation.Data.Point3D{`0,`1,`2}})">
            <summary>
            Constructor.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Clone">
            <summary>
            Clones the curve.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Equals(RBCC.Automation.Data.Map{`0,`1,`2})">
            <summary>
            Comparison method.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Add(RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Adds a point to the curve.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Clear">
            <summary>
            Clears the point.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Contains(RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Checks whether the curve contains the point.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.CopyTo(RBCC.Automation.Data.Point3D{`0,`1,`2}[],System.Int32)">
            <summary>
            Copies the curve to an array.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Remove(RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Removes a point from the curve.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an un-typed enumerator for the curve.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.GetEnumerator">
            <summary>
            Gets an typed enumerator for the curve.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.IndexOf(RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Provides the index of a specific point in the curve.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Insert(System.Int32,RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Inserts a point into the curve.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.RemoveAt(System.Int32)">
            <summary>
            Removes a point of the curve by its index.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.ToString">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.Equals(System.Object)">
            <summary>
            Comparison method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.GetHashCode">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.op_Equality(RBCC.Automation.Data.Map{`0,`1,`2},RBCC.Automation.Data.Map{`0,`1,`2})">
            <summary>
            Equality comparison method.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Map`3.op_Inequality(RBCC.Automation.Data.Map{`0,`1,`2},RBCC.Automation.Data.Map{`0,`1,`2})">
            <summary>
            Inequality comparison method.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.XAxis">
            <summary>
            Gets the x-axis of the curve.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.YAxis">
            <summary>
            Gets the y-axis of the curve.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.Count">
            <summary>
            Gets the count of points.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.IsReadOnly">
            <summary>
            Indicates whether the curve is readonly.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Map`3.Item(System.Int32)">
            <summary>
            Gets a point of the curve by its index.
            </summary>
            <value>Point 3 D</value>
        </member>
        <member name="T:RBCC.Automation.Data.Point`2">
            <summary>
            A double based point
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.#ctor(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.Equals(RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Comparison method.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.Perform``1(RBCC.Automation.Data.IPointOperation{``0,RBCC.Automation.Data.Point{`0,`1}})">
            <summary>
            Performs an operation on the point.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="operation">The operation.</param>
            <returns>TResult</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.Equals(System.Object)">
            <summary>
            Comparison method.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.GetHashCode">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.ToString">
            <summary>
            	<see cref="T:System.Object"/>
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.FuzzyEqual(RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`1})">
            <summary>
            Compares two points using an epsilon area.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="epsilonX">The epsilon X.</param>
            <param name="epsilonY">The epsilon Y.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.op_Equality(RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point`2.op_Inequality(RBCC.Automation.Data.Point{`0,`1},RBCC.Automation.Data.Point{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Point`2.X">
            <summary>
            Get/set the x value of the point.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Point`2.Y">
            <summary>
            Get/set the y value of the point.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Point3D`3">
            <summary>
            A double based point
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
            <typeparam name="TValueUnit">The type of the value unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.#ctor(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`1},RBCC.Automation.Data.Double{`2})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.Equals(RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Comparison method.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.Equals(System.Object)">
            <summary>
            Comparison method.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.GetHashCode">
            <summary>
            <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.ToString">
            <summary>
            <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.op_Equality(RBCC.Automation.Data.Point3D{`0,`1,`2},RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Point3D`3.op_Inequality(RBCC.Automation.Data.Point3D{`0,`1,`2},RBCC.Automation.Data.Point3D{`0,`1,`2})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Point3D`3.X">
            <summary>
            Get/set the x value of the point.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Point3D`3.Y">
            <summary>
            Get/set the y value of the point.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.Point3D`3.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.UnsignedInteger`1">
             /// <summary>
            A physical representation of a UnsignedInteger name and the corresponding unit.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.#ctor(System.UInt32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.UnsignedInteger`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit unsigned integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.CompareTo(RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Comparison method.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Equals(RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Equality comparison method.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.UnsignedInteger{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Addition(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Add(RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Subtraction(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Subtract(RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Multiply(RBCC.Automation.Data.UnsignedInteger{`0},System.UInt32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Multiply(System.UInt32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Division(RBCC.Automation.Data.UnsignedInteger{`0},System.UInt32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Divide(System.UInt32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Modulus(RBCC.Automation.Data.UnsignedInteger{`0},System.UInt32)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Mod(System.UInt32)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Equality(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Inequality(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_GreaterThan(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_LessThan(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_GreaterThanOrEqual(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_LessThanOrEqual(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.FuzzyEquals(RBCC.Automation.Data.UnsignedInteger{`0},RBCC.Automation.Data.UnsignedInteger{`0})">
            <summary>
            Equalses the specified expected double.
            </summary>
            <param name="expected">The expected double.</param>
            <param name="tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.ConvertToUnit(`0)">
            <summary>
            Converts the physical value to a specific unit.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.op_Implicit(RBCC.Automation.Data.UnsignedInteger{`0})~RBCC.Automation.Data.Double{`0}">
            <summary>
            Conversion to cast a integer to double physical value.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.UnsignedInteger`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.UnsignedInteger`1.Unit">
            <summary>
            Gets the unit.
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.UnsignedInteger`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.AbstractPortVariable`2">
            <summary>
            Abstract implementation of the port variables
            </summary>
            <typeparam name="TPortVariable">Type</typeparam>
            <typeparam name="TValue">Value</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IPortVariable`2">
            <summary>
            Interface for Portvariable
            </summary>
            <typeparam name="TPortVariable">The type of the port variable.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IPortVariable`1">
            <summary>
            Interface for PortVariable
            </summary>
            <typeparam name="TPortVariable">The type of the port variable.</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IPortVariable">
            <summary>
            Interface for PortVariable
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.IPortVariable.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:RBCC.Automation.Data.IPortVariable`1.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns>TPortVariable</returns>
        </member>
        <member name="M:RBCC.Automation.Data.IPortVariable`1.Write">
            <summary>
            Writes this instance.
            </summary>
            <returns>TPortVariable</returns>
        </member>
        <member name="P:RBCC.Automation.Data.IPortVariable`1.Reader">
            <summary>
            Gets or sets the reader.
            </summary>
            <value>The reader.</value>
        </member>
        <member name="P:RBCC.Automation.Data.IPortVariable`1.Writer">
            <summary>
            Gets or sets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="M:RBCC.Automation.Data.IPortVariable`2.Write(`1)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.IPortVariable`2.StartPolling(System.TimeSpan)">
            <summary>
            Starts the polling.
            </summary>
            <param name="intervall">The intervall.</param>
        </member>
        <member name="M:RBCC.Automation.Data.IPortVariable`2.StopPolling">
            <summary>
            Stops the polling.
            </summary>
        </member>
        <member name="E:RBCC.Automation.Data.IPortVariable`2.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.IPortVariable`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.IPortVariable`2.History">
            <summary>
            Gets or sets the history.
            </summary>
            <value>The history.</value>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.StartPolling(System.TimeSpan)">
            <summary>
            Starts the polling.
            </summary>
            <param name="intervall">The intervall.</param>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.StopPolling">
            <summary>
            Stops the polling.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.IsSatisfied(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.op_Implicit(RBCC.Automation.Data.AbstractPortVariable{`0,`1})~`0">
            <summary>
            Implicit operator.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.ToConcretePortVariable">
            <summary>
            To Concrete port variable
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AbstractPortVariable`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AbstractPortVariable`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.RaiseValueChanged(`1)">
            <summary>
            Raises the value changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns>Instance of the this object</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.Write">
            <summary>
            Writes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.Write(`1)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Instance of the this object</returns>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariable`2.WriteCore">
            <summary>
            Writes this instance.
            </summary>
            <returns>Instance of the this object</returns>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.UpdateHistory">
            <summary>
            Gets or sets a value indicating whether [update history].
            </summary>
            <value><c>true</c> if [update history]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:RBCC.Automation.Data.AbstractPortVariable`2.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.History">
            <summary>
            Gets or sets the history.
            </summary>
            <value>The history.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.Reader">
            <summary>
            Gets or sets the reader.
            </summary>
            <value>The reader.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.Writer">
            <summary>
            Gets or sets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariable`2.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:RBCC.Automation.Data.AbstractPortVariableDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AbstractPortVariableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AbstractPortVariableDictionary`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableBoolean"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.AbstractPortVariableDictionary`2.Mapping">
            <summary>
            Gets or sets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableArrayBoolean">
            <summary>
            PortVariableArrayBoolean
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableArrayBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableArrayBoolean"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableArrayBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableArrayBoolean"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableArrayDouble`1">
            <summary>
            PortVariableArrayDouble
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableArrayDouble`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableArrayDouble`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableArrayDouble`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableArrayDouble`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableArrayDouble`1.SetRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Sets the range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableArrayDouble`1.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableArrayDouble`1.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableArrayDouble`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableArrayDouble`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryArrayBoolean`1">
            <summary>
            PortVariableDictionaryArrayBoolean
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryArrayBoolean`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryArrayBoolean`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryArrayBoolean`1.Mapping">
            <summary>
            Gets or sets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2.Mapping">
            <summary>
            Gets or sets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryArrayDouble`2.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryMatrixBoolean`1">
            <summary>
            PortVariableDictionaryMatrixBoolean
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryMatrixBoolean`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryMatrixBoolean`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryMatrixBoolean`1.Mapping">
            <summary>
            Gets or sets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2">
            <summary>
            
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryMatrixDouble`2.Mapping">
            <summary>
            Gets or sets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryBoolean`1">
            <summary>
            
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryBoolean`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryBoolean`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryBoolean`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryBoolean`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryDouble`2">
            <summary>
            PortVariableDictionaryDouble
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryDouble`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryDouble`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryDouble`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryDouble`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryDouble`2.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryDouble`2.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryInteger`2">
            <summary>
            
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryInteger`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryInteger`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryInteger`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryInteger`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryInteger`2.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryInteger`2.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2">
            <summary>
            PortVariableDictionaryUnsignedInteger
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDictionaryUnsignedInteger`2.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableEnum`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableEnum`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableBoolean"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableEnum`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableBoolean"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableEnum`1.SetSelection(`0)">
            <summary>
            Sets the selected item in the list.
            </summary>
            <param name="selected">The selected item.</param>
            <returns>This very instance.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableEnum`1.WriteCore">
            <summary>
            Method to have write access to the base PortVariable writer.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableEnum`1.op_Implicit(RBCC.Automation.Data.PortVariableEnum{`0})~`0">
            <summary>
            Implicit operator s the T enum.
            </summary>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableEnum`1.Selected">
            <summary>
            Gets or sets the selection.
            </summary>
            <comment>The selection.</comment>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableCurve`2">
            <summary>
            PortVariableCurve
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableCurve`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableCurve`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableCurve`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableCurve`2"/> class.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableCurve`2.SetXRange(System.Double,System.Double)">
            <summary>
            Sets the X range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableCurve`2.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the Y range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.YMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name y-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.YMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name y-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.XMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name x-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.XMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name x-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.XToolUnit">
            <summary>
            Gets or sets the X tool unit.
            </summary>
            <value>The X tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.YToolUnit">
            <summary>
            Gets or sets the Y tool unit.
            </summary>
            <value>The Y tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.XUserUnit">
            <summary>
            Gets or sets the X user unit.
            </summary>
            <value>The X user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableCurve`2.YUserUnit">
            <summary>
            Gets or sets the Y user unit.
            </summary>
            <value>The Y user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableInteger`1">
            <summary>
            PortVariableInteger
            </summary>
            <typeparam name="TUnit"></typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableInteger`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableInteger`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableInteger`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableInteger`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableInteger`1.op_Explicit(RBCC.Automation.Data.PortVariableInteger{`0})~RBCC.Automation.Data.Integer{`0}">
            <summary>
            Explicit operator s the double.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableInteger`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.Integer{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableInteger`1.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableInteger`1.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableInteger`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableInteger`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableMap`3">
            <summary>
            PortVariableMap
            </summary>
            <typeparam name="TXUnit">The type of the X unit.</typeparam>
            <typeparam name="TYUnit">The type of the Y unit.</typeparam>
            <typeparam name="TValueUnit">The type of the value unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMap`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableCurve`2"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMap`3.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableCurve`2"/> class.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMap`3.SetXRange(System.Double,System.Double)">
            <summary>
            Sets the X range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMap`3.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the Y range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMap`3.SetValueRange(System.Double,System.Double)">
            <summary>
            Sets the value range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.YMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name y-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.YMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name y-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.XMinimum">
            <summary>
            Gets or sets the lower bound of the permitted name x-range.
            </summary>
            <name>The minimum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.XMaximum">
            <summary>
            Gets or sets the upper bound of the permitted name x-range.
            </summary>
            <name>The maximum name.</name>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.ValueMinimum">
            <summary>
            Gets or sets the value minimum.
            </summary>
            <value>The value minimum.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.ValueMaximum">
            <summary>
            Gets or sets the value X maximum.
            </summary>
            <value>The value X maximum.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.XToolUnit">
            <summary>
            Gets or sets the X tool unit.
            </summary>
            <value>The X tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.YToolUnit">
            <summary>
            Gets or sets the Y tool unit.
            </summary>
            <value>The Y tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.ValueToolUnit">
            <summary>
            Gets or sets the value tool unit.
            </summary>
            <value>The value unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.XUserUnit">
            <summary>
            Gets or sets the X user unit.
            </summary>
            <value>The X user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.YUserUnit">
            <summary>
            Gets or sets the Y user unit.
            </summary>
            <value>The Y user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMap`3.ValueUserUnit">
            <summary>
            Gets or sets the value user unit.
            </summary>
            <value>The value user unit.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableMatrixBoolean">
            <summary>
            
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMatrixBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableMatrixDouble`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMatrixBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableMatrixDouble`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableMatrixDouble`1">
            <summary>
            PortVariableMatrixDouble
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMatrixDouble`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableMatrixDouble`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMatrixDouble`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableMatrixDouble`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableMatrixDouble`1.SetRange(RBCC.Automation.Data.Double{`0},RBCC.Automation.Data.Double{`0})">
            <summary>
            Sets the range.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMatrixDouble`1.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMatrixDouble`1.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMatrixDouble`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableMatrixDouble`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableString">
            <summary>
            PortVariableString
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableString"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableString"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableBoolean">
            <summary>
            PortVariableBoolean
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableBoolean"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableBoolean"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableDouble`1">
            <summary>
            PortVariableDouble
            </summary>
            <typeparam name="TUnit"></typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDouble`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableDouble`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.Write(System.Double,`0)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.op_Explicit(RBCC.Automation.Data.PortVariableDouble{`0})~RBCC.Automation.Data.Double{`0}">
            <summary>
            Explicit operator s the double.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.Double{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableDouble`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDouble`1.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDouble`1.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDouble`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableDouble`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PortVariableUnsignedInteger`1">
            <summary>
            PortVariableUnsignedInteger
            </summary>
            <typeparam name="TUnit"></typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableUnsignedInteger`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableInteger`1"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableUnsignedInteger`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.PortVariableInteger`1"/> class.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableUnsignedInteger`1.op_Explicit(RBCC.Automation.Data.PortVariableUnsignedInteger{`0})~RBCC.Automation.Data.UnsignedInteger{`0}">
            <summary>
            Explicit operator s the double.
            </summary>
            <param name="left">The left.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableUnsignedInteger`1.IsSatisfied(RBCC.Automation.Data.Specification{RBCC.Automation.Data.UnsignedInteger{`0}})">
            <summary>
            Determines whether the specified specification is satisfied.
            </summary>
            <param name="specification">The specification.</param>
            <returns>
            	<c>true</c> if the specified specification is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.PortVariableUnsignedInteger`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableUnsignedInteger`1.ToolUnit">
            <summary>
            Gets or sets the tool unit.
            </summary>
            <value>The tool unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableUnsignedInteger`1.UserUnit">
            <summary>
            Gets or sets the user unit.
            </summary>
            <value>The user unit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableUnsignedInteger`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.PortVariableUnsignedInteger`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="T:RBCC.Automation.Data.ValueChangedEventArgs`1">
            <summary>
            ValueChangedEventArgs
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.ValueChangedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.ValueChangedEventArgs`1"/> class.
            Remark Approximate Resolution: Windows NT 3.5 and later is about 10 milliseconds!
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:RBCC.Automation.Data.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:RBCC.Automation.Data.ValueChangedEventArgs`1.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="T:RBCC.Automation.Data.PredicateBuilder">
            <summary>
            See http://www.albahari.com/expressions for information and examples.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.PredicateBuilder.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PredicateBuilder.ExclusiveOr``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Nots the specified expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:RBCC.Automation.Data.Specification`1">
            <summary>
            Specifications are a Design Pattern from Eric Evans "Domain Driven Design".
            They allow 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Specification`1"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether [is satisfied by] [the specified parameter].
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified parameter]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.And(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Ands the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.Or(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Ors the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.Xor(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Xs the or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Specification`1.op_LogicalNot(RBCC.Automation.Data.Specification{`0})">
            <summary>
            Operator !s the specified specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns></returns>
        </member>
        <member name="P:RBCC.Automation.Data.Specification`1.Predicate">
            <summary>
            Gets or sets the predicate.
            </summary>
            <value>The predicate.</value>
        </member>
        <member name="T:RBCC.Automation.Data.AccelerationUnit">
            <summary>
            holding the available acceleration units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AccelerationUnit.MeterPerSquareSecond">
            <summary>
            Meter Per Square Second ('m/s²')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AccelerationUnit.AccelerationOfGravity">
            <summary>
            Acceleration of gravity (g)
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Acceleration">
            <summary>
            Class for acceleration objects delivering acceleration unit objects 
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.AccelerationUnit"/></remarks>
        </member>
        <member name="T:RBCC.Automation.Data.Unit`2">
            <summary>
            /// A base class for units which provides methods for comparisons, conversions and formatting.
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
            <typeparam name="TUnitEnum">The type of the unit enum.</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IUnit`1">
            <summary>
            The genereic interface for a unit, to isolate conversions within only the same type of unit.
            </summary>
            <typeparam name="TUnit">The concrete type of the unit.</typeparam>
        </member>
        <member name="T:RBCC.Automation.Data.IUnit">
            <summary>
            IUnit is used from both, a typed parameter implementation and a concrete unit class.
            Since the ATCL takes a string value in place of a unit enum or unit class, a parameter 
            must rely on the capability of IUnit 
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.IUnit.ToString">
            <summary>
            Converts the unit to its string representation.
            </summary>
            <returns>the units string representation.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.IUnit.FromString(System.String)">
            <summary>
            Converts the given string into a unit class.
            </summary>
            <param name="unit">The units string representation.</param>
            <returns>the unit class corresponding with the given string.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.IUnit`1.GetConversionDelegateFor(`0)">
            <summary>
            Gets the conversion delegate for the given unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="F:RBCC.Automation.Data.Unit`2.Entities">
            <summary>
            Contains the <see cref="T:RBCC.Automation.Data.UnitEntity`1"/>s of the concrete unit class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.GetUnitDescriptions">
            <summary>
            Gets the unit descriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.Equals(`1)">
            <summary>
            Indicates whether the current unit is equal to a value of the corresponding unit enum.
            </summary>
            <param name="other">A value out of the corresponding unit enum to compare with the current value.</param>
            <returns>
            true if the current value is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.GetConversionDelegateFor(`0)">
            <summary>
            Gets the conversion delegate for the given unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.GetConversionDelegate(`0)">
            <summary>
            Gets the conversion factor from this unit to the given unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The conversion factor.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.op_Equality(RBCC.Automation.Data.Unit{`0,`1},RBCC.Automation.Data.Unit{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.op_Inequality(RBCC.Automation.Data.Unit{`0,`1},RBCC.Automation.Data.Unit{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.op_Equality(RBCC.Automation.Data.Unit{`0,`1},`1)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.op_Inequality(RBCC.Automation.Data.Unit{`0,`1},`1)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.Unit`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current units enum name.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current units enum name.
            </returns>
        </member>
        <member name="P:RBCC.Automation.Data.Unit`2.DefaultUnit">
            <summary>
            Gets or sets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Unit`2.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Unit`2.Selected">
            <summary>
            Gets or sets the selected enum value.
            </summary>
            <value>The selected enum value.</value>
        </member>
        <member name="M:RBCC.Automation.Data.Acceleration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Acceleration"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.AccelerationUnit.MeterPerSquareSecond"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Acceleration.#ctor(RBCC.Automation.Data.AccelerationUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Acceleration"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Acceleration.MeterPerSquareSecond">
            <summary>
            Gets the DegreePerSecond.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AccelerationUnit.MeterPerSquareSecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Acceleration.AccelerationOfGravity">
            <summary>
            Gets the Acceleration Of Gravity.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AccelerationUnit.AccelerationOfGravity"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.AngleUnit">
            <summary>
            holding the available angle units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngleUnit.Degree">
            <summary>
            Degree ('°')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngleUnit.Radian">
            <summary>
            Radian ('rad')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngleUnit.Grade">
            <summary>
            Grade ('gon')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngleUnit.Brad">
            <summary>
            Binary Radian ('brad')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Angle">
            <summary>
            Class for angle objects delivering angle objects 
            and holding dictionary with SUT conform strings of angle units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.AngleUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Angle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Angle"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.AngleUnit.Degree"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Angle.#ctor(RBCC.Automation.Data.AngleUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Angle"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Angle.Degree">
            <summary>
            Gets the Degree.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngleUnit.Degree"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Angle.Radian">
            <summary>
            Gets the Radian.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngleUnit.Radian"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Angle.Grade">
            <summary>
            Gets the Grade.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngleUnit.Grade"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Angle.Brad">
            <summary>
            Gets the Binary Radian.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngleUnit.Brad"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.AngularAccelerationUnit">
            <summary>
            holding the available angular acceleration units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularAccelerationUnit.DegreePerSecondSquared">
            <summary>
            Degree Per Second Squared ('°/s2')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularAccelerationUnit.RadianPerSecondSquared">
            <summary>
            Radian Per Second Squared ('rad/s2')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularAccelerationUnit.RevolutionPerSecondSquared">
            <summary>
            Revolution Per Second Squared ('rev/s2')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularAccelerationUnit.RevolutionPerMinuteSquared">
            <summary>
            Revolution Per Minute Squared ('rev/min2')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.AngularAcceleration">
            <summary>
            Class for angular acceleration objects delivering acceleration unit objects 
            and holding dictionary with SUT conform strings of acceleration units
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AngularAcceleration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AngularAcceleration"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.AngularAccelerationUnit.DegreePerSecondSquared"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AngularAcceleration.#ctor(RBCC.Automation.Data.AngularAccelerationUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AngularVelocity"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.AngularAcceleration.DegreePerSecondSquared">
            <summary>
            Gets the DegreePerSecond Squared.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularAccelerationUnit.DegreePerSecondSquared"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularAcceleration.RadianPerSecondSquared">
            <summary>
            Gets the RadianPerSecond Squared.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularAccelerationUnit.RadianPerSecondSquared"/>.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularAcceleration.RevolutionPerSecondSquared">
            <summary>
            Gets the RevolutionPerSecondSquared Squared.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularAccelerationUnit.RevolutionPerSecondSquared"/>.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularAcceleration.RevolutionPerMinuteSquared">
            <summary>
            Gets the RevolutionPerMinuteSquared Squared.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularAccelerationUnit.RevolutionPerMinuteSquared"/>.</value>
        </member>
        <member name="T:RBCC.Automation.Data.AngularVelocityUnit">
            <summary>
            holding the available angular velocity units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularVelocityUnit.DegreePerSecond">
            <summary>
            Degree Per Second ('°/s')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularVelocityUnit.RadianPerSecond">
            <summary>
            Radian Per Second ('rad/s')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularVelocityUnit.RotationsPerMinute">
            <summary>
            Rotations Per Minute ('rpm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.AngularVelocityUnit.RotationsPerSecond">
            <summary>
            Rotations Per Second ('rps')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.AngularVelocity">
            <summary>
            Class for angular velocity objects delivering velocity unit objects 
            and holding dictionary with SUT conform strings of velocity units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.AngularVelocityUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.AngularVelocity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AngularVelocity"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.AngularVelocityUnit.DegreePerSecond"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.AngularVelocity.#ctor(RBCC.Automation.Data.AngularVelocityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.AngularVelocity"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.AngularVelocity.DegreePerSecond">
            <summary>
            Gets the DegreePerSecond.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularVelocityUnit.DegreePerSecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularVelocity.RadianPerSecond">
            <summary>
            Gets the RadianPerSecond.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularVelocityUnit.RadianPerSecond"/>.</value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularVelocity.RotationsPerMinute">
            <summary>
            Gets the RotationsPerMinute.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularVelocityUnit.RotationsPerMinute"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.AngularVelocity.RotationsPerSecond">
            <summary>
            Gets the RotationsPerMinute.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.AngularVelocityUnit.RotationsPerSecond"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.Constants">
            <summary>
            Constant declaration for units.
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Atto">
            <summary>
            (a) Atto = 10 ^ -18
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Centi">
            <summary>
            (c) Centi = 10 ^ -2
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Deca">
            <summary>
            (da) Deca = 10
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Deci">
            <summary>
            (d) Deci = 10 ^ -1
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Exa">
            <summary>
            (E) Exa = 10 ^ 18
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Femto">
            <summary>
            (f) Femto = 10 ^ -15
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Giga">
            <summary>
            (G) Giga = 10 ^ 9
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Hecto">
            <summary>
            (h) Hecto = 10 ^ 2
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Kilo">
            <summary>
            (k) Kilo = 10 ^ 3
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Mega">
            <summary>
            (M) Mega = 10 ^ 6
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Micro">
            <summary>
            (µ) Micro = 10 ^ -6
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Milli">
            <summary>
            (m) Milli = 10 ^ -3
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Nano">
            <summary>
            (n) Nano = 10 ^ -9
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Peta">
            <summary>
            (P) Peta = 10 ^ 15
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Pico">
            <summary>
            (p) Pico = 10 ^ -12
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.Constants.Tera">
            <summary>
            (T) Tera = 10 ^ 12
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.CurrentUnit">
            <summary>
            holding the available current units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.CurrentUnit.Ampere">
            <summary>
            Ampere ('A')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.CurrentUnit.Kiloampere">
            <summary>
            Kiloampere ('kA')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.CurrentUnit.Milliampere">
            <summary>
            Milliampere ('mA')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.CurrentUnit.Microampere">
            <summary>
            Micoampere ('µA')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.CurrentUnit.CoulombPerSecond">
            <summary>
            Coulomb Per Second ('C/s')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Current">
            <summary>
            Class for current objects delivering current unit objects 
            and holding dictionary with SUT conform strings of current units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.CurrentUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Current.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Current"/> class with its selected unit initially set to <see cref="F:RBCC.Automation.Data.CurrentUnit.Ampere"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Current.#ctor(RBCC.Automation.Data.CurrentUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Current"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Current.Ampere">
            <summary>
            Gets the Ampere.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.CurrentUnit.Ampere"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Current.Kiloampere">
            <summary>
            Gets the Kiloampere.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.CurrentUnit.Kiloampere"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Current.Milliampere">
            <summary>
            Gets the Milliampere.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.CurrentUnit.Milliampere"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Current.Microampere">
            <summary>
            Gets the Microampere.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.CurrentUnit.Microampere"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Current.CoulombPerSecond">
            <summary>
            Gets the coulomb per second.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.CurrentUnit.CoulombPerSecond"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.ForceUnit">
            <summary>
            holding the available force units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ForceUnit.Newton">
            <summary>
            Newton ('N')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ForceUnit.Kilonewton">
            <summary>
             Kilonewton ('KN')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ForceUnit.Meganewton">
            <summary>
             Meganewton ('MN')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.ForceUnit.Millinewton">
            <summary>
             Millinewton ('mN')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Force">
            <summary>
            Class for force objects delivering force unit objects 
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.ForceUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Force.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Force"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.ForceUnit.Newton"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Force.#ctor(RBCC.Automation.Data.ForceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Force"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Force.Newton">
            <summary>
            Gets the Newton.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.ForceUnit.Newton"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Force.Kilonewton">
            <summary>
            Gets the Kilonewton.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.ForceUnit.Kilonewton"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Force.Meganewton">
            <summary>
            Gets the Meganewton.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.ForceUnit.Meganewton"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Force.Millinewton">
            <summary>
            Gets the Millinewton.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.ForceUnit.Millinewton"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.FrequencyUnit">
            <summary>
            FrequencyUnit
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Hertz">
            <summary>
            'Hz' = 0
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Kilohertz">
            <summary>
            Kilohertz ('kHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Megahertz">
            <summary>
            Megahertz ('MHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Gigahertz">
            <summary>
            Gigahertz ('GHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Decihertz">
            <summary>
            Decihertz ('dHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Centihertz">
            <summary>
            Centihertz ('cHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Millihertz">
            <summary>
            Millihertz ('mHz')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.FrequencyUnit.Microhertz">
            <summary>
            Microhertz ('µHz')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Frequency">
            <summary>
            Class for frequency objects delivering frequency unit objects 
            and holding dictionary with SUT conform strings of frequency units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.FrequencyUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Frequency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Frequency"/> class with its selected unit initially set to <see cref="P:RBCC.Automation.Data.Frequency.Hertz"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Frequency.#ctor(RBCC.Automation.Data.FrequencyUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Frequency"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Hertz">
            <summary>
            Gets the Hertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Hertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Kilohertz">
            <summary>
            Gets the Kilohertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Kilohertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Megahertz">
            <summary>
            Gets the Megahertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Megahertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Gigahertz">
            <summary>
            Gets the Gigahertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Gigahertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Decihertz">
            <summary>
            Gets the Decihertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Decihertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Centihertz">
            <summary>
            Gets the Centihertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Centihertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Millihertz">
            <summary>
            Gets the Millihertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Millihertz"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Frequency.Microhertz">
            <summary>
            Gets the Microhertz.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Frequency.Microhertz"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.LengthUnit">
            <summary>
            holding the available length or distance units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Meter">
            <summary>
            Meter ('m')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Kilometer">
            <summary>
            Kilometer ('km')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Decimeter">
            <summary>
            Decimeter ('dm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Centimeter">
            <summary>
            Centimeter ('cm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Millimeter">
            <summary>
            Millimeter ('mm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.LengthUnit.Micrometer">
            <summary>
            Micrometer ('µm')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Length">
            <summary>
            Class for length objects delivering length unit objects 
            and holding dictionary with SUT conform strings of length units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.LengthUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Length.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Length"/> class with its selected unit initially set to <see cref="F:RBCC.Automation.Data.LengthUnit.Meter"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Length.#ctor(RBCC.Automation.Data.LengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Length"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Meter">
            <summary>
            Gets the Meter.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Meter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Centimeter">
            <summary>
            Gets the Centimeter.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Centimeter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Decimeter">
            <summary>
            Gets the Decimeter.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Decimeter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Kilometer">
            <summary>
            Gets the Kilometer.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Kilometer"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Micrometer">
            <summary>
            Gets the micrometer.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Micrometer"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Length.Millimeter">
            <summary>
            Gets the Millimeter.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.LengthUnit.Millimeter"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.NoneUnit">
            <summary>
            holding the available length or distance units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.NoneUnit.None">
            <summary>
            None Unit
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.None">
            <summary>
            Represents an implementation of <see cref="T:RBCC.Automation.Data.IUnit"/> which keeps the SUT conform unit string '' for 'no unit specified'.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.None.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.None"/> class.
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.PowerUnit">
            <summary>
            holding the available power units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PowerUnit.Newton">
            <summary>
            Newton ('N')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Power">
            <summary>
            Class for power objects delivering power unit objects 
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.PowerUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Power.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Power"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.PowerUnit.Newton"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Power.#ctor(RBCC.Automation.Data.PowerUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Power"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Power.Newton">
            <summary>
            Gets the Newton.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Power.Newton"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.PressureUnit">
            <summary>
            holding the available pressure units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PressureUnit.Pascal">
            <summary>
            'Pa'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PressureUnit.Kilopascal">
            <summary>
            'kPa'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PressureUnit.Hectopascal">
            <summary>
            'hPa'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PressureUnit.Bar">
            <summary>
            'bar'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.PressureUnit.Millibar">
            <summary>
            'mbar'
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Pressure">
            <summary>
            Class for pressure objects delivering pressure objects 
            and holding dictionary with SUT conform strings of pressure units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.PressureUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Pressure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Pressure"/> class with its unit initially set to <see cref="P:RBCC.Automation.Data.Pressure.Pascal"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Pressure.#ctor(RBCC.Automation.Data.PressureUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Pressure"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Pressure.Pascal">
            <summary>
            Gets the Pascal.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.PressureUnit.Pascal"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Pressure.Kilopascal">
            <summary>
            Gets the Kilopascal.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.PressureUnit.Kilopascal"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Pressure.Hectopascal">
            <summary>
            Gets the Hectopascal.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.PressureUnit.Hectopascal"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Pressure.Bar">
            <summary>
            Gets the Bar.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.PressureUnit.Bar"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Pressure.Millibar">
            <summary>
            Gets the Millibar.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.PressureUnit.Millibar"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.RatioUnit">
            <summary>
            holding the available ratio units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.RatioUnit.Percent">
            <summary>
            '%'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.RatioUnit.PerMill">
            <summary>
            '‰'
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.RatioUnit.PerOne">
            <summary>
            'per one'
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Ratio">
            <summary>
            Class for ratio objects delivering ratio objects 
            and holding dictionary with SUT conform strings of ratio units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.RatioUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Ratio.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Ratio"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.RatioUnit.Percent"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Ratio.#ctor(RBCC.Automation.Data.RatioUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Ratio"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Ratio.Percent">
            <summary>
            Gets the Percent.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.RatioUnit.Percent"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Ratio.PerMill">
            <summary>
            Gets the Per Mill.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.RatioUnit.PerMill"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Ratio.PerOne">
            <summary>
            Gets the Per One.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.RatioUnit.PerOne"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.TemperatureUnit">
            <summary>
            holding the available temperature units.
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TemperatureUnit.Celsius">
            <summary>
            Celsius ('°C')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TemperatureUnit.Fahrenheit">
            <summary>
            Fahrenheit ('°F')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TemperatureUnit.Kelvin">
            <summary>
            Kelvin ('K')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Temperature">
            <summary>
            Class for time objects delivering temperature unit objects 
            and holding dictionary with SUT conform strings of temperature units.
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.TemperatureUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Temperature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Temperature"/> class.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Temperature.#ctor(RBCC.Automation.Data.TemperatureUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Temperature"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:RBCC.Automation.Data.Temperature.GetConversionDelegate(RBCC.Automation.Data.Temperature)">
            <summary>
            Gets the conversion factor from this unit to the given unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The conversion factor.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.Temperature.Celsius">
            <summary>
            Gets the temperature in celsius.
            </summary>
            <value>The temperature in celsius.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Temperature.Fahrenheit">
            <summary>
            Gets the temperature in fahrenheit.
            </summary>
            <value>The temperature in fahrenheit.</value>
        </member>
        <member name="P:RBCC.Automation.Data.Temperature.Kelvin">
            <summary>
            Gets the temperature in kelvin.
            </summary>
            <value>The temperature in kelvin.</value>
        </member>
        <member name="T:RBCC.Automation.Data.TimeUnit">
            <summary>
            holding the available time units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Second">
            <summary>
            Second ('s')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Year">
            <summary>
            Year ('yr')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Month">
            <summary>
            Month ('mth')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Day">
            <summary>
            Day ('d')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Hour">
            <summary>
            Hour ('hr')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Minute">
            <summary>
            Minute ('min')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Millisecond">
            <summary>
            Millisecond ('ms')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TimeUnit.Microsecond">
            <summary>
            Microsecond ('µs')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Time">
            <summary>
            Class for time objects delivering time unit objects 
            and holding dictionary with SUT conform strings of time units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.TimeUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Time.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Time"/> class with its selected unit set initially to <see cref="F:RBCC.Automation.Data.TimeUnit.Second"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Time.#ctor(RBCC.Automation.Data.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Time"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Second">
            <summary>
            Gets the Second.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Second"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Millisecond">
            <summary>
            Gets the milli Second.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Millisecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Microsecond">
            <summary>
            Gets the micro Second.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Microsecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Year">
            <summary>
            Gets the Year.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Year"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Month">
            <summary>
            Gets the Month.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Month"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Day">
            <summary>
            Gets the Day.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Day"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Hour">
            <summary>
            Gets the Hour.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Hour"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Time.Minute">
            <summary>
            Gets the Minute.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.TimeUnit.Minute"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.TorqueUnit">
            <summary>
            holding the available Torque units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TorqueUnit.Newtonmeter">
            <summary>
            Newtonmeter ('Nm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TorqueUnit.CentiNewtonmeter">
            <summary>
            CentiNewtonmeter ('cNm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TorqueUnit.KiloNewtonmeter">
            <summary>
            KiloNewtonmeter ('kNm')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.TorqueUnit.MilliNewtonmeter">
            <summary>
            MilliNewtonmeter ('mNm')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Torque">
            <summary>
            Class for Torque objects delivering Torque unit objects 
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.TorqueUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Torque.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Torque"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.TorqueUnit.Newtonmeter"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Torque.#ctor(RBCC.Automation.Data.TorqueUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Torque"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Torque.Newtonmeter">
            <summary>
            Gets the Newtonmeter.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Torque.Newtonmeter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Torque.CentiNewtonmeter">
            <summary>
            Gets the CentiNewtonmeter.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Torque.CentiNewtonmeter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Torque.KiloNewtonmeter">
            <summary>
            Gets the KiloNewtonmeter.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Torque.KiloNewtonmeter"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Torque.MilliNewtonmeter">
            <summary>
            Gets the MilliNewtonmeter.
            </summary>
            <value>gets <see cref="P:RBCC.Automation.Data.Torque.MilliNewtonmeter"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.UnitEntity`1">
            <summary>
            Container for a unit entity definition.
            </summary>
            <typeparam name="TUnitEnum">The type of the unit enum.</typeparam>
        </member>
        <member name="M:RBCC.Automation.Data.UnitEntity`1.Equals(RBCC.Automation.Data.UnitEntity{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnitEntity`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnitEntity`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnitEntity`1.op_Equality(RBCC.Automation.Data.UnitEntity{`0},RBCC.Automation.Data.UnitEntity{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:RBCC.Automation.Data.UnitEntity`1.op_Inequality(RBCC.Automation.Data.UnitEntity{`0},RBCC.Automation.Data.UnitEntity{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:RBCC.Automation.Data.UnitEntity`1.UnitEnum">
            <summary>
            Gets or sets the unit enum.
            </summary>
            <value>The unit enum.</value>
        </member>
        <member name="P:RBCC.Automation.Data.UnitEntity`1.UnitString">
            <summary>
            Gets or sets the unit string.
            </summary>
            <value>The unit string.</value>
        </member>
        <member name="P:RBCC.Automation.Data.UnitEntity`1.Factor">
            <summary>
            Gets or sets the factor/offset.
            </summary>
            <value>The factor.</value>
        </member>
        <member name="T:RBCC.Automation.Data.VelocityUnit">
            <summary>
            holding the available velocity units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VelocityUnit.MeterPerSecond">
            <summary>
            Meter Per Second ('m/s')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VelocityUnit.KilometerPerHour">
            <summary>
            Kilometer Per Hour ('km/h')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VelocityUnit.MilesPerHour">
            <summary>
            Miles Per Hour ('mph')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VelocityUnit.CentimeterPerSecond">
            <summary>
            Centimeter Per Second ('cm/s')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Velocity">
            <summary>
            Class for velocity objects delivering velocity unit objects 
            and holding dictionary with SUT conform strings of velocity units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.VelocityUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Velocity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Velocity"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.VelocityUnit.MeterPerSecond"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Velocity.#ctor(RBCC.Automation.Data.VelocityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Velocity"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Velocity.CentimeterPerSecond">
            <summary>
            Gets the CentimeterPerSecond.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VelocityUnit.CentimeterPerSecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Velocity.KilometerPerHour">
            <summary>
            Gets the KilometerPerHour.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VelocityUnit.KilometerPerHour"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Velocity.MeterPerSecond">
            <summary>
            Gets the MeterPerSecond.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VelocityUnit.MeterPerSecond"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Velocity.MilesPerHour">
            <summary>
            Gets the MilesPerHour.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VelocityUnit.MilesPerHour"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.VoltageUnit">
            <summary>
            holding the available voltage units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VoltageUnit.Volt">
            <summary>
            Volt ('V')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VoltageUnit.Kilovolt">
            <summary>
            Kilovolt ('kV')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VoltageUnit.Millivolt">
            <summary>
            Millivolt ('mV')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.VoltageUnit.Microvolt">
            <summary>
            Microvolt ('µV')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Voltage">
            <summary>
            Class for voltage objects delivering voltage unit objects 
            and holding dictionary with SUT conform strings of voltage units
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.VoltageUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Voltage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Voltage"/> class with its selected unit set initially to <see cref="F:RBCC.Automation.Data.VoltageUnit.Volt"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Voltage.#ctor(RBCC.Automation.Data.VoltageUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Voltage"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Voltage.Volt">
            <summary>
            Gets the Volt.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VoltageUnit.Volt"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Voltage.Kilovolt">
            <summary>
            Gets the Kilovolt.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VoltageUnit.Kilovolt"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Voltage.Millivolt">
            <summary>
            Gets the Millivolt.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VoltageUnit.Millivolt"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Voltage.Microvolt">
            <summary>
            Gets the Microvolt.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.VoltageUnit.Microvolt"/></value>
        </member>
        <member name="T:RBCC.Automation.Data.WeightUnit">
            <summary>
            holding the available weight units
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.WeightUnit.Gram">
            <summary>
            Gram ('g')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.WeightUnit.Microgram">
            <summary>
             Microgram ('µg')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.WeightUnit.Milligram">
            <summary>
             Miligram ('mg')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.WeightUnit.Kilogram">
            <summary>
             Kilogram ('kg')
            </summary>
        </member>
        <member name="F:RBCC.Automation.Data.WeightUnit.Ton">
            <summary>
             Ton ('t')
            </summary>
        </member>
        <member name="T:RBCC.Automation.Data.Weight">
            <summary>
            Class for weight objects delivering weight unit objects 
            </summary>
            <remarks>Wraps <see cref="T:RBCC.Automation.Data.WeightUnit"/></remarks>
        </member>
        <member name="M:RBCC.Automation.Data.Weight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Weight"/> class with its unit initially set to <see cref="F:RBCC.Automation.Data.WeightUnit.Gram"/>.
            </summary>
        </member>
        <member name="M:RBCC.Automation.Data.Weight.#ctor(RBCC.Automation.Data.WeightUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:RBCC.Automation.Data.Weight"/> class.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:RBCC.Automation.Data.Weight.Gram">
            <summary>
            Gets the Gram.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.WeightUnit.Gram"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Weight.Kilogram">
            <summary>
            Gets the Kilogram.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.WeightUnit.Kilogram"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Weight.Ton">
            <summary>
            Gets the Ton.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.WeightUnit.Ton"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Weight.Milligram">
            <summary>
            Gets the Milligram.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.WeightUnit.Milligram"/></value>
        </member>
        <member name="P:RBCC.Automation.Data.Weight.Microgram">
            <summary>
            Gets the Microgram.
            </summary>
            <value>gets <see cref="F:RBCC.Automation.Data.WeightUnit.Microgram"/></value>
        </member>
    </members>
</doc>
